package actions;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import database.MySQLConnection;

@WebServlet("/savePreferencesServlet")
public class SavePreferences extends HttpServlet {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	protected synchronized void doPost(HttpServletRequest req, HttpServletResponse res)
			throws ServletException, IOException {
		Map<String, String[]> parameterMap = req.getParameterMap();

		HttpSession session = req.getSession();
		String userName = session.getAttribute("username").toString();
		String role = null;
		int student_id = 3;
		int staff_id = 1;
		int insertCount = 0;

		try {
			Connection conn = MySQLConnection.getConnection();

			// Identify student/staff based on logged-in username
			String selectQuery = "Select role, student_id, staff_id from login where username = '" + userName + "'";
			PreparedStatement ptst = conn.prepareStatement(selectQuery);
			ResultSet rs = ptst.executeQuery();
			if (rs.next()) {
				role = rs.getString("role");
				student_id = rs.getInt("student_id");
				staff_id = rs.getInt("staff_id");
			}
			if (student_id != 3) {
				Map<String, Integer> preferences = new HashMap<String, Integer>();
				List<String> topicIDs = new ArrayList<String>();
				for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {
					String topicId = entry.getKey().toString();
					System.out.println(topicId);
					String preference = entry.getValue()[0];
					int prefNumber = Integer.parseInt(preference);
					preferences.put(topicId, prefNumber);
				}
				System.out.println(preferences.toString());
				
				List<Map.Entry<String, Integer>> sortedEntries = new ArrayList<>(preferences.entrySet());
		        sortedEntries.sort(Map.Entry.comparingByValue());
		        
		        topicIDs = sortedEntries.stream().map(Map.Entry::getKey).collect(Collectors.toList());
				
				String topicIdString = topicIDs.stream().collect(Collectors.joining(","));
				System.out.println(topicIdString);
				
					// Insert preferences
					String insertQuery = "INSERT INTO preferences (student_id, preferences) VALUES (?, ?) "
							+ " ON DUPLICATE KEY UPDATE preferences = VALUES(preferences)";
					PreparedStatement statement = conn.prepareStatement(insertQuery);

					statement.setInt(1, student_id);
					statement.setString(2, topicIdString);
					insertCount = statement.executeUpdate();

				if (insertCount > 0) {
					// Send email notification to student after saving preferences
					System.out.println("Preferences saved successfully!!!");
					EmailNotification email = new EmailNotification();
					String toEmail = userName + "@student.le.ac.uk";
					String redirect = "studentHome.jsp?saved";
					String message = "Hello,\n\n" + "This is a Msc. Final Project testing. "
							+ "Your topic preferences for the Personal and Group skills module has been selected."
							+ "You can modify your preferences until the deadline.\n\n" + "Best regards,\n"
							+ "Project Testing";
					email.sendEmail(toEmail, "Topic Preferences Saved", message);
					res.sendRedirect(redirect);
				}
			} else {
				List<Integer> topicIDs = new ArrayList<Integer>();
				String numGroups = req.getParameter("numGroups");
				String[] topics = req.getParameterValues("topics[]");
				String placeholders = String.join(",", Collections.nCopies(topics.length, "?"));
				int updateCount = 0;

				String selectQuery1 = "Select topic_id, topic_name from topics where topic_name in (" + placeholders
						+ ")";
				PreparedStatement ptst1 = conn.prepareStatement(selectQuery1);
				for (int i = 0; i < topics.length; i++) {
					ptst1.setString(i + 1, topics[i]);
				}
				ResultSet rs1 = ptst1.executeQuery();
				while (rs1.next()) {
					topicIDs.add(rs1.getInt("topic_id"));
				}
				String topicIDsStr = topicIDs.stream().map(String::valueOf).collect(Collectors.joining(","));

				String selectQuery2 = "Select 1 from supervisor_prefs where staff_id = ? limit 1";
				PreparedStatement ptst2 = conn.prepareStatement(selectQuery2);
				ptst2.setInt(1, staff_id);
				ResultSet rs2 = ptst2.executeQuery();
				if (rs2.next()) {
					// Update record if preference is being modified
					String updateQuery = "Update supervisor_prefs set numgroups = ?, topics = ? where username = ? and staff_id = ?";
					PreparedStatement updatePtst = conn.prepareStatement(updateQuery);
					updatePtst.setInt(1, Integer.parseInt(numGroups));
					updatePtst.setString(2, topicIDsStr);
					updatePtst.setString(3, userName);
					updatePtst.setInt(4, staff_id);
					updateCount = updatePtst.executeUpdate();
				} else {
					// Insert record if new preference is saved
					String insertQuery = "Insert into supervisor_prefs (staff_id, username, numgroups, topics) "
							+ " Values (?, ?, ?, ?)";
					PreparedStatement statement = conn.prepareStatement(insertQuery);
					statement.setInt(1, staff_id);
					statement.setString(2, userName);
					statement.setInt(3, Integer.parseInt(numGroups));
					statement.setString(4, topicIDsStr);
					insertCount = statement.executeUpdate();
				}
				if (updateCount > 0 || insertCount > 0) {
					// Send email notification to supervisor after saving preferences
					EmailNotification email = new EmailNotification();
					String toEmail = userName + "@leicester.ac.uk";
					String redirect = "supervisorHome.jsp?saved";
					String message = "Hello,\n\n"
							+ "Do not panic. This is a Msc. Final Project testing email from Akash "
							+ "Your topic preferences for the Personal and Group skills module has been selected."
							+ "You can modify your preferences until the deadline.\n\n" + "Best regards,\n"
							+ "Project Testing";
					email.sendEmail(toEmail, "Topic Preferences Saved", message);
					res.sendRedirect(redirect);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
}
