package actions;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import org.jgrapht.Graph;
import org.jgrapht.alg.flow.EdmondsKarpMFImpl;
import org.jgrapht.graph.DefaultDirectedWeightedGraph;
import org.jgrapht.graph.DefaultWeightedEdge;

import database.MySQLConnection;

public class StudentAllocation {

	private static Map<String, Integer> assignSupervisorsToTopics(Map<String, List<List<Integer>>> validGroups,
			Map<Integer, List<String>> supervisorPreferences) {

		Map<String, Integer> topicSupervisorAssignment = new HashMap<>();
		supervisorPreferences.forEach((supervisorId, preferences) -> {
			preferences.forEach(topic -> {
				if (validGroups.containsKey(topic)) {
					// Assign supervisor to the topic if not already assigned
					topicSupervisorAssignment.putIfAbsent(topic, supervisorId);
				}
			});
		});
		return topicSupervisorAssignment;
	}

	// Count the number of students assigned to their respective preferences
	private static Map<String, Integer> assignmentCount(List<String> topics,
			Map<String, List<List<Integer>>> topicGroupCount, Map<Integer, List<String>> students) {
		Map<String, Integer> scores = new HashMap<>();
		scores.put("first", 0);
		scores.put("second", 0);
		scores.put("third", 0);
		scores.put("fourth", 0);
		scores.put("random", 0);
		int total = 0;

		for (String t : topics) {
			if (!topicGroupCount.containsKey(t)) {
				continue;
			}
			for (List<Integer> group : topicGroupCount.get(t)) {
				for (int s : group) {
					List<String> prefs = students.get(s);
					if (t.equalsIgnoreCase(prefs.get(0))) {
						scores.put("first", scores.get("first") + 1);
					} else if (prefs.size() > 1 && t.equalsIgnoreCase(prefs.get(1))) {
						scores.put("second", scores.get("second") + 1);
					} else if (prefs.size() > 2 && t.equalsIgnoreCase(prefs.get(2))) {
						scores.put("third", scores.get("third") + 1);
					} else if (prefs.size() > 3 && t.equalsIgnoreCase(prefs.get(3))) {
						scores.put("fourth", scores.get("fourth") + 1);
					} else {
						scores.put("random", scores.get("random") + 1);
					}
					total++;
				}
			}
		}

		return scores;
	}

	// Save the student assignment results to a CSV file
	private static int resultFile(List<String> topics, Map<String, List<List<Integer>>> topicGroupCount) {
		List<Map<String, Object>> resultData = new ArrayList<>();
		int totalAssigned = 0;
		for (String t : topics) {
			if (!topicGroupCount.containsKey(t)) {
				continue;
			}
			for (int i = 0; i < topicGroupCount.get(t).size(); i++) {
				List<Integer> group = topicGroupCount.get(t).get(i);
				totalAssigned += group.size();
				for (int student : group) {
					Map<String, Object> row = new HashMap<>();
					row.put("topic", t);
					row.put("group", i + 1);
					row.put("student", student);
					resultData.add(row);
				}
			}
		}
		// Write data to CSV file
		try (FileWriter writer = new FileWriter("allocation.csv")) {
			writer.append("topic,group,student\n");
			for (Map<String, Object> row : resultData) {
				writer.append(row.get("topic") + "," + row.get("group") + "," + row.get("student") + "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		return totalAssigned;
	}

	// Log the results and parameters into a text file
	private static void logFile(int totalAssigned, List<String> topics, int assignedTopics, int minGroupSize,
			int maxGroupSize, int topicUseLimit, Map<String, Integer> assignedCounts, int total) {
		try (FileWriter writer = new FileWriter("log_file.txt")) {
			writer.write("All " + totalAssigned + " students were assigned successfully.\n");
			writer.write("Assigned " + assignedTopics + " out of " + topics.size() + " topics.\n\n");
			writer.write("Parameters:\n");
			writer.write("Min group size: " + minGroupSize + "\n");
			writer.write("Max group size: " + maxGroupSize + "\n");
			writer.write("Topic use limit: " + topicUseLimit + "\n\n");
			writer.write("Assignment Summary:\n");
			writer.write("Total assigned with preferences: " + total + "\n");
			writer.write("Total assigned at random: " + assignedCounts.get("random") + "\n\n");
			writer.write("Score Function:\n");
			writer.write("  1st preference: " + assignedCounts.get("first") + "\n");
			writer.write("  2nd preference: " + assignedCounts.get("second") + "\n");
			writer.write("  3rd preference: " + assignedCounts.get("third") + "\n");
			writer.write("  4th preference: " + assignedCounts.get("fourth") + "\n");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static int sumGroupSizes(List<List<Integer>> groups) {
		int sum = 0;
		for (List<Integer> group : groups) {
			sum += group.size();
		}
		return sum;
	}

	public static void main(String[] args) {
		int minGroupSize = 3;
		int maxGroupSize = 5;
		int topicUseLimit = 3;

		Map<Integer, List<String>> students = new HashMap<>();
		Map<Integer, List<String>> supervisors = new HashMap<>();
		Map<Integer, Integer> supervisorCapacities = new HashMap<>();
		List<String> topics = new ArrayList<>();

		try {
			Connection conn = MySQLConnection.getConnection();
			loadStudents(conn, students);
			loadTopics(conn, topics);
			loadSupervisors(conn, supervisors, supervisorCapacities);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return;
		}

		// Initialize graph
        Graph<String, DefaultWeightedEdge> G = new DefaultDirectedWeightedGraph<>(DefaultWeightedEdge.class);
        setupGraph(G, students, supervisors, topics, supervisorCapacities, maxGroupSize, topicUseLimit);

     // Compute max flow
        EdmondsKarpMFImpl<String, DefaultWeightedEdge> maxFlow = new EdmondsKarpMFImpl<>(G);
        double flow = maxFlow.calculateMaximumFlow("source", "sink");
        
     // Get allocation results
        Map<String, Object[]> topicGroupCount = analyzeFlow(G, maxFlow.getFlowMap(), topics, students, supervisors, maxGroupSize);

     // Output the allocation
        System.out.println("Before Redistribution:");
        printAllocation(topicGroupCount);
        
        Redistribution redistribution = new Redistribution();
        topicGroupCount = redistribution.redistributeStudents(topicGroupCount, students, minGroupSize, maxGroupSize);
        
        System.out.println("------------------------------");
        System.out.println("After Redistribution:");
        printAllocation(topicGroupCount);

		// Redistribution of students
		// System.out.println(redistribute(topicGroupCount, students, minGroupSize,
		// maxGroupSize));

		// Count the number of students assigned to their respective preferences
		// Map<String, Integer> assignedCounts = assignmentCount(topics,
		// topicGroupCount, students);

		// Save the student assignment results to a CSV file
		// int totalAssigned = resultFile(topics, topicGroupCount);

		// Log the results and parameters into a text file
		// logFile(totalAssigned, topics, topicGroupCount.size(), minGroupSize,
		// maxGroupSize, topicUseLimit, assignedCounts, totalAssigned);
	}

	private static void loadStudents(Connection conn, Map<Integer, List<String>> students) throws Exception {
		String query = "SELECT student_id, preferences FROM preferences";
		try (PreparedStatement ptst = conn.prepareStatement(query); ResultSet rs = ptst.executeQuery()) {
			while (rs.next()) {
				int studentId = rs.getInt("student_id");
				String preferences = rs.getString("preferences");
				List<String> prefs = Arrays.stream(preferences.split(",")).map(topicId -> "t" + topicId)
						.collect(Collectors.toList());
				students.put(studentId, prefs);
			}
		}
	}

	private static void loadTopics(Connection conn, List<String> topics) throws Exception {
		String query = "SELECT concat('t', topic_id) AS topicID FROM topics";
		try (PreparedStatement ptst = conn.prepareStatement(query); ResultSet rs = ptst.executeQuery()) {
			while (rs.next()) {
				topics.add(rs.getString("topicID"));
			}
		}
	}

	private static void loadSupervisors(Connection conn, Map<Integer, List<String>> supervisors,
			Map<Integer, Integer> supervisorCapacities) throws Exception {
		String query = "SELECT staff_id, numgroups, topics FROM supervisor_prefs";
		try (PreparedStatement ptst = conn.prepareStatement(query); ResultSet rs = ptst.executeQuery()) {
			while (rs.next()) {
				int supervisorId = rs.getInt("staff_id");
				int numGroups = rs.getInt("numgroups");
				String dbTopics = rs.getString("topics");
				List<String> supervisorTopics = Arrays.stream(dbTopics.split(",")).map(s -> "t" + s)
						.collect(Collectors.toList());
				supervisors.put(supervisorId, supervisorTopics);
				supervisorCapacities.put(supervisorId, numGroups);
			}
		}
	}
	
	private static void setupGraph(Graph<String, DefaultWeightedEdge> G, Map<Integer, List<String>> students, Map<Integer, List<String>> supervisors, List<String> topics, Map<Integer, Integer> supervisorCapacities, int maxGroupSize, int topicUseLimit) {
	    G.addVertex("source");
	    G.addVertex("sink");
	    students.keySet().forEach(s -> {
	        String studentVertex = "s" + s;
	        G.addVertex(studentVertex);
	        G.setEdgeWeight(G.addEdge("source", studentVertex), 1);
	    });
	    topics.forEach(t -> {
	        G.addVertex(t);
	        //G.setEdgeWeight(G.addEdge(t, "sink"), maxGroupSize * topicUseLimit);
	    });
	    supervisors.keySet().forEach(supervisorId -> {
	        String supervisorVertex = "supervisor" + supervisorId;
	        G.addVertex(supervisorVertex);
	        G.setEdgeWeight(G.addEdge(supervisorVertex, "sink"), supervisorCapacities.get(supervisorId));
	    });
	    students.forEach((studentId, prefs) -> {
	        for (int i = 0; i < prefs.size(); i++) {
	            String pref = prefs.get(i);
	            DefaultWeightedEdge edge = G.addEdge("s" + studentId, pref);
	            if (edge != null) {
	                // Assign weights based on preferences: higher preference, lower "cost"
	                // Since we're maximizing flow, lower costs (weights) are better, so we reverse the preference order
	                // For simplicity, assuming 4 preferences max, adjust if more
	                double weight = 5 - (i + 1); // This gives 4 for highest pref, down to 1 for lowest
	                G.setEdgeWeight(edge, weight);
	            }
	        }
	    });
	    supervisors.forEach((supervisorId, supervisorTopics) -> supervisorTopics.forEach(topic -> {
	        DefaultWeightedEdge edge = G.addEdge(topic, "supervisor" + supervisorId);
	        if (edge != null) {
	            G.setEdgeWeight(edge, supervisorCapacities.get(supervisorId)); // Set to numgroups of supervisor to ensure capacity is respected
	        }
	    }));
	}

	private static Map<String, Object[]> analyzeFlow(Graph<String, DefaultWeightedEdge> G, Map<DefaultWeightedEdge, Double> flowMap, List<String> topics, Map<Integer, List<String>> students, Map<Integer, List<String>> supervisors, int maxGroupSize) {
        Map<String, Object[]> topicGroupCount = new HashMap<>();
        topics.forEach(topic -> {
            List<List<Integer>> assignedStudentsLists = new ArrayList<>();
            List<Integer> assignedStudents = new ArrayList<>();
            int assignedSupervisor = findAssignedSupervisor(G, flowMap, topic, supervisors);
            students.keySet().forEach(studentId -> {
                if (flowMap.getOrDefault(G.getEdge("s" + studentId, topic), 0.0) > 0.0) {
                    assignedStudents.add(studentId);
                    if (assignedStudents.size() == maxGroupSize) {
                        assignedStudentsLists.add(new ArrayList<>(assignedStudents));
                        assignedStudents.clear();
                    }
                }
            });
            if (!assignedStudents.isEmpty()) {
                assignedStudentsLists.add(new ArrayList<>(assignedStudents));
            }
            topicGroupCount.put(topic, new Object[]{assignedStudentsLists, assignedSupervisor});
        });
        return topicGroupCount;
    }

    private static int findAssignedSupervisor(Graph<String, DefaultWeightedEdge> G, Map<DefaultWeightedEdge, Double> flowMap, String topic, Map<Integer, List<String>> supervisors) {
        return supervisors.entrySet().stream().filter(entry -> flowMap.getOrDefault(G.getEdge(topic, "supervisor" + entry.getKey()), 0.0) > 0.0).findFirst().map(Map.Entry::getKey).orElse(0);
    }

    private static void printAllocation(Map<String, Object[]> topicGroupCount) {
        topicGroupCount.forEach((topic, details) -> {
            @SuppressWarnings("unchecked")
            List<List<Integer>> studentGroups = (List<List<Integer>>) details[0];
            int supervisorId = (Integer) details[1];
            System.out.println("Topic: " + topic + ", Supervisor ID: " + supervisorId + ", Student Groups: " + studentGroups);
        });
    }
	
}