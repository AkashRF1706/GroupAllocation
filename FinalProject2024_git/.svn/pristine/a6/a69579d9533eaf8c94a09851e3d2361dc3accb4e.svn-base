package actions;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.jgrapht.Graph;
import org.jgrapht.alg.flow.EdmondsKarpMFImpl;
import org.jgrapht.graph.DefaultDirectedWeightedGraph;
import org.jgrapht.graph.DefaultWeightedEdge;

import database.MySQLConnection;

public class StudentAllocation {

    // Other parts of the code...

    // Redistribute students among groups based on their preferences
    private static void redistributeStudents(List<String> topics, Map<String, List<List<Integer>>> topicGroupCount,
                                              Map<Integer, List<String>> students, int minGroupSize, int maxGroupSize,
                                              int topicUseLimit) {
        List<Integer> studentsToRedistribute = new ArrayList<Integer>();
        for (String t : topics) {
            List<List<Integer>> combinedGroups = new ArrayList<>();
            if(!topicGroupCount.containsKey(t)) {
            	continue;
            }
            for (List<Integer> group : topicGroupCount.get(t)) {
            	combinedGroups.add(new ArrayList<>(group));
            }
            topicGroupCount.put(t, new ArrayList<>());
            int i = 0;
            while (combinedGroups.size() >= minGroupSize) {
                List<List<Integer>> newGroup = new ArrayList<>();
                for (List<Integer> group : combinedGroups.subList(0, Math.min(maxGroupSize, combinedGroups.size()))) {
                    newGroup.add(new ArrayList<>(group));
                }
                topicGroupCount.get(t).addAll(newGroup);
                combinedGroups = combinedGroups.subList(newGroup.size(), combinedGroups.size());
                i++;
            }
            if (!combinedGroups.isEmpty()) {
                studentsToRedistribute.addAll(combinedGroups.get(0));
            }
        }

        // Redistribute students
        while (!studentsToRedistribute.isEmpty()) {
            int s = studentsToRedistribute.remove(0);
            List<String> prefs = students.get(s);
            boolean assigned = false;
            for (String t : prefs) {  // Checking all preferences in order
            	if(!topicGroupCount.containsKey(t)) {
            		continue;
            	}
                if (!topicGroupCount.get(t).isEmpty() && topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).size() < maxGroupSize &&
                        sumGroupSizes(topicGroupCount.get(t)) + 1 <= topicUseLimit * maxGroupSize) {
                    topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).add(s);
                    assigned = true;
                    break;
                }
            }
            if (!assigned) {  // If no preference could be fulfilled, assign randomly
                for (String t : topics) {
                	if(!topicGroupCount.containsKey(t)) {
                		continue;
                	}
                    if (topicGroupCount.get(t).isEmpty()) {
                        topicGroupCount.get(t).add(new ArrayList<>(List.of(s)));
                        assigned = true;
                        break;
                    } else if (topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).size() < maxGroupSize &&
                            sumGroupSizes(topicGroupCount.get(t)) + 1 <= topicUseLimit * maxGroupSize) {
                        topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).add(s);
                        assigned = true;
                        break;
                    }
                }
            }
            if (!assigned) {
                System.out.println("Unable to assign student " + s + " to any topic");
            }
        }

        // Merge small groups to form groups of at least minGroupSize
        for (String t : topics) {
        	if(!topicGroupCount.containsKey(t)) {
        		continue;
        	}
            for (int i = 0; i < topicGroupCount.get(t).size(); i++) {
                List<Integer> group = topicGroupCount.get(t).get(i);
                if (group.size() < minGroupSize) {
                    List<Integer> nextGroup = i + 1 < topicGroupCount.get(t).size() ? topicGroupCount.get(t).get(i + 1) : null;
                    while (group.size() < minGroupSize && nextGroup != null && !nextGroup.isEmpty()) {
                        group.add(nextGroup.remove(nextGroup.size() - 1));
                        if (nextGroup.isEmpty()) {
                            topicGroupCount.get(t).remove(i + 1);
                        }
                    }
                }
            }
        }

        // Combine small groups to reach minGroupSize
        List<List<Integer>> smallGroups = topicGroupCount.values().stream().flatMap(List::stream)
                .filter(group -> group.size() < minGroupSize)
                .collect(Collectors.toList());
        while (!smallGroups.isEmpty()) {
            List<Integer> group = smallGroups.remove(0);
            for (String t : topics) {
            	if(!topicGroupCount.containsKey(t)) {
            		continue;
            	}
                while (group.size() < minGroupSize && !topicGroupCount.get(t).isEmpty() &&
                        topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).size() > minGroupSize) {
                    group.add(topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).remove(
                            topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).size() - 1));
                    if (topicGroupCount.get(t).get(topicGroupCount.get(t).size() - 1).size() == minGroupSize) {
                        break;
                    }
                }
                if (group.size() == minGroupSize) {
                    break;
                }
            }
        }
    }

    // Count the number of students assigned to their respective preferences
    private static Map<String, Integer> assignmentCount(List<String> topics, Map<String, List<List<Integer>>> topicGroupCount,
                                                         Map<Integer, List<String>> students) {
        Map<String, Integer> scores = new HashMap<>();
        scores.put("first", 0);
        scores.put("second", 0);
        scores.put("third", 0);
        scores.put("fourth", 0);
        scores.put("random", 0);
        int total = 0;

        for (String t : topics) {
        	if(!topicGroupCount.containsKey(t)) {
        		continue;
        	}
            for (List<Integer> group : topicGroupCount.get(t)) {
                for (int s : group) {
                    List<String> prefs = students.get(s);
                    if (t.equalsIgnoreCase(prefs.get(0))) {
                        scores.put("first", scores.get("first") + 1);
                    } else if (prefs.size() > 1 && t.equalsIgnoreCase(prefs.get(1))) {
                        scores.put("second", scores.get("second") + 1);
                    } else if (prefs.size() > 2 && t.equalsIgnoreCase(prefs.get(2))) {
                        scores.put("third", scores.get("third") + 1);
                    } else if (prefs.size() > 3 && t.equalsIgnoreCase(prefs.get(3))) {
                        scores.put("fourth", scores.get("fourth") + 1);
                    } else {
                        scores.put("random", scores.get("random") + 1);
                    }
                    total++;
                }
            }
        }

        return scores;
    }

    // Save the student assignment results to a CSV file
    private static int resultFile(List<String> topics, Map<String, List<List<Integer>>> topicGroupCount) {
        List<Map<String, Object>> resultData = new ArrayList<>();
        int totalAssigned = 0;
        for (String t : topics) {
        	if(!topicGroupCount.containsKey(t)) {
        		continue;
        	}
            for (int i = 0; i < topicGroupCount.get(t).size(); i++) {
                List<Integer> group = topicGroupCount.get(t).get(i);
                totalAssigned += group.size();
                for (int student : group) {
                    Map<String, Object> row = new HashMap<>();
                    row.put("topic", t);
                    row.put("group", i + 1);
                    row.put("student", student);
                    resultData.add(row);
                }
            }
        }
        // Write data to CSV file
        try (FileWriter writer = new FileWriter("allocation.csv")) {
            writer.append("topic,group,student\n");
            for (Map<String, Object> row : resultData) {
                writer.append(row.get("topic") + "," + row.get("group") + "," + row.get("student") + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return totalAssigned;
    }

    // Log the results and parameters into a text file
    private static void logFile(int totalAssigned, List<String> topics, int assignedTopics,
                                int minGroupSize, int maxGroupSize, int topicUseLimit, Map<String, Integer> assignedCounts, int total) {
        try (FileWriter writer = new FileWriter("log_file.txt")) {
            writer.write("All " + totalAssigned + " students were assigned successfully.\n");
            writer.write("Assigned " + assignedTopics + " out of " + topics.size() + " topics.\n\n");
            writer.write("Parameters:\n");
            writer.write("Min group size: " + minGroupSize + "\n");
            writer.write("Max group size: " + maxGroupSize + "\n");
            writer.write("Topic use limit: " + topicUseLimit + "\n\n");
            writer.write("Assignment Summary:\n");
            writer.write("Total assigned with preferences: " + total + "\n");
            writer.write("Total assigned at random: " + assignedCounts.get("random") + "\n\n");
            writer.write("Score Function:\n");
            writer.write("  1st preference: " + assignedCounts.get("first") + "\n");
            writer.write("  2nd preference: " + assignedCounts.get("second") + "\n");
            writer.write("  3rd preference: " + assignedCounts.get("third") + "\n");
            writer.write("  4th preference: " + assignedCounts.get("fourth") + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static int sumGroupSizes(List<List<Integer>> groups) {
        int sum = 0;
        for (List<Integer> group : groups) {
            sum += group.size();
        }
        return sum;
    }

    public static void main(String[] args) {
    	 int minGroupSize = 3;
         int maxGroupSize = 5;
         int topicUseLimit = 7;
         
         Map<Integer, List<String>> students = new HashMap<>();
         List<String> topics = new ArrayList<>();

         try {
        	 Connection conn = MySQLConnection.getConnection();
        	 String query = "SELECT student_id, "
        	 		+ " MAX(CASE WHEN preference_rank = 1 THEN concat('t', topic_id) END) AS pref1, "
        	 		+ " MAX(CASE WHEN preference_rank = 2 THEN concat('t', topic_id) END) AS pref2, "
        	 		+ " MAX(CASE WHEN preference_rank = 3 THEN concat('t', topic_id) END) AS pref3, "
        	 		+ " MAX(CASE WHEN preference_rank = 4 THEN concat('t', topic_id) END) AS pref4 "
        	 		+ " FROM preferences "
        	 		+ " GROUP BY student_id";
        	 
        	 PreparedStatement ptst = conn.prepareStatement(query);
        	 ResultSet rs = ptst.executeQuery();
        	 while(rs.next()) {
        		 int studentId = rs.getInt("student_id");
                 List<String> prefs = new ArrayList<>();
                 prefs.add(rs.getString("pref1"));
                 prefs.add(rs.getString("pref2"));
                 prefs.add(rs.getString("pref3"));
                 prefs.add(rs.getString("pref4"));
                 students.put(studentId, prefs);
        	 }
        	 
        	 String query1 = "Select concat('t', topic_id) as topicID, topic_name from topics";
        	 PreparedStatement ptst1 = conn.prepareStatement(query1);
        	 ResultSet rs1 = ptst1.executeQuery();
        	 while(rs1.next()) {
        		 topics.add(rs1.getString("topicID"));
        	 }
         } catch (Exception e) {
			// TODO: handle exception
        	 e.printStackTrace();
		}
         
      // Initialize directed graph (network)
         Graph<String, DefaultWeightedEdge> G = new DefaultDirectedWeightedGraph<>(DefaultWeightedEdge.class);
         G.addVertex("source");
         G.addVertex("sink");
         
      // Add nodes for students and topics
         for (int s : students.keySet()) {
             G.addVertex(String.valueOf(s));
         }
         for (String t : topics) {
             G.addVertex(t);
         }
         
      // Add edges between source and students (capacity 1)
         for (int s : students.keySet()) {
             DefaultWeightedEdge edge = G.addEdge("source", String.valueOf(s));
             G.setEdgeWeight(edge, 1.0);
         }
         
      // Add edges between students and topics (capacity 1, weight based on preference)
         for (int s : students.keySet()) {
             List<String> prefs = students.get(s);
             for (int i = 0; i < prefs.size(); i++) {
                 String t = prefs.get(i);
                 DefaultWeightedEdge edge = G.addEdge(String.valueOf(s), String.valueOf(t));
                 G.setEdgeWeight(edge, i + 1);
             }
         }
         
      // Add edges between topics and sink (capacity based on maxGroupSize and topicUseLimit)
         for (String t : topics) {
             DefaultWeightedEdge edge = G.addEdge(String.valueOf(t), "sink");
             G.setEdgeWeight(edge, maxGroupSize * topicUseLimit);
         }
         
         // Compute minimum cost flow
         EdmondsKarpMFImpl<String, DefaultWeightedEdge> maxFlow = new EdmondsKarpMFImpl<>(G);
         double flow = maxFlow.calculateMaximumFlow("source", "sink");
         
      // Get the flow map
         Map<DefaultWeightedEdge, Double> flowMap = maxFlow.getFlowMap();
         System.out.println(flowMap);
         
         Map<String, List<List<Integer>>> topicGroupCount = new HashMap<>();
         for(String t : topics) {
        	 List<List<Integer>> assignedStudentsLists = new ArrayList<>();
        	 List<Integer> assignedStudents = new ArrayList<>();
        	 for(int s : students.keySet()) {
        		 DefaultWeightedEdge edge = G.getEdge(String.valueOf(s), String.valueOf(t));
        		 if(edge != null && flowMap.containsKey(edge) && flowMap.get(edge) > 0) {
        			 assignedStudents.add(s);
        			 if (assignedStudents.size() == maxGroupSize) {
        				 assignedStudentsLists.add(assignedStudents);
        	             topicGroupCount.put(t, assignedStudentsLists);
        				 assignedStudents.clear();
                     }
        		 }
        	 }
        	 if(!assignedStudents.isEmpty()) {
        		 assignedStudentsLists.add(assignedStudents);
        		 topicGroupCount.put(t, assignedStudentsLists);
        	 }
         }
    	

        // Redistribution of students
        redistributeStudents(topics, topicGroupCount, students, minGroupSize, maxGroupSize, topicUseLimit);

        // Count the number of students assigned to their respective preferences
        Map<String, Integer> assignedCounts = assignmentCount(topics, topicGroupCount, students);

        // Save the student assignment results to a CSV file
        int totalAssigned = resultFile(topics, topicGroupCount);

        // Log the results and parameters into a text file
        logFile(totalAssigned, topics, topicGroupCount.size(), minGroupSize, maxGroupSize, topicUseLimit, assignedCounts, totalAssigned);
    }
}
